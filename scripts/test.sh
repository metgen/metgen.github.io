#!/bin/bash

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DASHBOARD_FILE="/etc/update-motd.d/99-dashboard"
FORCE_MODE=false
REQUIRED_PACKAGES=("vnstat" "curl" "jq")

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
COLOR_RESET="\033[0m"
COLOR_RED="\033[0;31m"
COLOR_GREEN="\033[0;32m"
COLOR_YELLOW="\033[0;33m"
COLOR_BLUE="\033[0;34m"
COLOR_CYAN="\033[0;36m"
COLOR_WHITE="\033[1;37m"

# –§—É–Ω–∫—Ü–∏–∏
show_error() {
    echo -e "${COLOR_RED}‚ùå –û—à–∏–±–∫–∞: $1${COLOR_RESET}" >&2
}

show_warning() {
    echo -e "${COLOR_YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: $1${COLOR_RESET}"
}

show_success() {
    echo -e "${COLOR_GREEN}‚úÖ $1${COLOR_RESET}"
}

show_info() {
    echo -e "${COLOR_CYAN}‚ÑπÔ∏è $1${COLOR_RESET}"
}

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        show_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
        show_info "sudo bash -c "$(wget -qO- https://metgen.github.io/scripts/dashboard.sh)" "
        exit 1
    fi
}

check_utf8() {
    if ! locale | grep -qi 'utf-8'; then
        show_warning "–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UTF-8. –í–æ–∑–º–æ–∂–Ω—ã –∏—Å–∫–∞–∂–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞."
    fi
}

install_packages() {
    local missing_pkgs=()
    for pkg in "${REQUIRED_PACKAGES[@]}"; do
        if ! command -v "$pkg" &>/dev/null; then
            missing_pkgs+=("$pkg")
        fi
    done

    if [ ${#missing_pkgs[@]} -gt 0 ]; then
        show_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: ${missing_pkgs[*]}..."
        if apt-get update && apt-get install -y "${missing_pkgs[@]}"; then
            show_success "–ü–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else
            show_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"
            exit 1
        fi
    fi
}

generate_dashboard() {
    cat > "$1" << 'EOF'
#!/bin/bash

# –¶–≤–µ—Ç–∞
bold=$(tput bold)
normal=$(tput sgr0)
blue=$(tput setaf 4)
green=$(tput setaf 2)
red=$(tput setaf 1)
yellow=$(tput setaf 3)
cyan=$(tput setaf 6)
white=$(tput setaf 7)

# –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
ok="${green}‚óè${normal}"
fail="${red}‚óè${normal}"
warn="${yellow}‚óè${normal}"
separator="${blue}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${normal}"

# –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
echo "${normal}"

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
echo "$separator"
echo "${bold}${cyan}üöÄ –°–ò–°–¢–ï–ú–ù–´–ô –î–ê–®–ë–û–†–î ${white}$(date +'%Y-%m-%d %H:%M:%S')${normal}"
echo "$separator"

# –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
uptime_str=$(uptime -p | sed 's/up //')
loadavg=$(cut -d ' ' -f1-3 /proc/loadavg)
cpu_cores=$(nproc)
cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{printf "%.1f%%", 100 - $8}')
mem_data=$(free -m | awk '/Mem:/ {printf "%.0f%% (%dMB/%dMB)", $3/$2*100, $3, $2}')
swap_data=$(free -m | awk '/Swap:/ {if ($2!=0) printf "%.0f%% (%dMB/%dMB)", $3/$2*100, $3, $2; else print "N/A"}')

# –î–∏—Å–∫–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
disk_used=$(df -h / | awk 'NR==2 {print $5}' | tr -d '%')
disk_line=$(df -h / | awk 'NR==2 {print $5 " (" $3 " / " $2 ")"}')
if [ "$disk_used" -ge 95 ]; then
    disk_status="${red}${disk_line}${normal} ${red}[–ö–†–ò–¢–ò–ß–ù–û: –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ!]${normal}"
elif [ "$disk_used" -ge 85 ]; then
    disk_status="${yellow}${disk_line}${normal} ${yellow}[–í–Ω–∏–º–∞–Ω–∏–µ: –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞]${normal}"
else
    disk_status="${green}${disk_line}${normal}"
fi

# –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
traffic=$(vnstat --oneline 2>/dev/null | awk -F\; '{print $10 " ‚Üì / " $11 " ‚Üë"}') || traffic="N/A"
ip_local=$(hostname -I | awk '{print $1}')
ip_public=$(curl -4 -s ifconfig.me || echo "N/A")
ip6=$(ip -6 addr show scope global | grep inet6 | awk '{print $2}' | cut -d/ -f1 | head -n1)
[ -z "$ip6" ] && ip6="N/A"

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
if systemctl is-active crowdsec &>/dev/null; then
    bouncers=$(crowdsec-cli bouncers list 2>/dev/null | grep -v NAME | awk '{print $1 ": " $2}' | paste -sd ', ' -)
    [ -z "$bouncers" ] && crowdsec_status="$warn active, no bouncers" || crowdsec_status="$ok $bouncers"
else
    crowdsec_status="$fail not running"
fi

# Docker
if command -v docker &>/dev/null; then
    docker_total=$(docker ps -a -q | wc -l)
    docker_running=$(docker ps -q | wc -l)
    docker_stopped=$((docker_total - docker_running))
    docker_msg="$ok ${docker_running} running / ${docker_stopped} stopped"
    bad_containers=$(docker ps -a --filter "status=exited" --filter "status=restarting" --format '{{.Names}} ({{.Status}})' | head -2)
    if [ -n "$bad_containers" ]; then
        docker_msg="$fail Issues: $docker_running running / $docker_stopped stopped
       ${red}‚õî $bad_containers${normal}"
    fi
else
    docker_msg="$warn not installed"
fi

# SSH
ssh_users=$(who | wc -l)
ssh_ips=$(who | awk '{print $5}' | tr -d '()' | sort | uniq | paste -sd ', ' -)

# –§–∞–π—Ä–≤–æ–ª–ª
if command -v fail2ban-client &>/dev/null; then
    jail_count=$(fail2ban-client status | grep -c "Jail list:")
    fail2ban_status="$ok active (${jail_count} jails)"
else
    fail2ban_status="$warn not installed"
fi

if command -v ufw &>/dev/null; then
    ufw_status=$(ufw status | grep -i "Status" | awk '{print $2}')
    if [[ "$ufw_status" == "active" ]]; then
        rules_count=$(ufw status numbered | grep -c '^\[[0-9]\]')
        ufw_status="$ok enabled (${rules_count} rules)"
    else
        ufw_status="$warn disabled"
    fi
else
    ufw_status="$warn not installed"
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
updates=$(apt list --upgradable 2>/dev/null | grep -v "Listing" | wc -l)
if [ "$updates" -gt 50 ]; then
    update_msg="${red}$updates packages${normal} can be updated"
elif [ "$updates" -gt 20 ]; then
    update_msg="${yellow}$updates packages${normal} can be updated"
else
    update_msg="${green}$updates packages${normal} can be updated"
fi

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
temp=$(cat /sys/class/thermal/thermal_zone*/temp 2>/dev/null | awk '{print $1/1000}' | sort -nr | head -1)
[ -n "$temp" ] && temp_status="üå°Ô∏è  ${temp}¬∞C" || temp_status=""

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
printf "${bold}${cyan}üè† –•–æ—Å—Ç:          ${normal} %s\n" "$(hostname -f)"
printf "${bold}${cyan}‚è±Ô∏è  –ê–ø—Ç–∞–π–º:        ${normal} %s\n" "$uptime_str"
printf "${bold}${cyan}üßÆ –ù–∞–≥—Ä—É–∑–∫–∞:      ${normal} %s (1/5/15 –º–∏–Ω)\n" "$loadavg"
printf "${bold}${cyan}‚öôÔ∏è  CPU:           ${normal} %s –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, ${cpu_cores} —è–¥–µ—Ä\n" "$cpu_usage"
printf "${bold}${cyan}üíæ RAM:           ${normal} %s\n" "$mem_data"
printf "${bold}${cyan}üîÄ SWAP:          ${normal} %s\n" "$swap_data"
printf "${bold}${cyan}üíΩ –î–∏—Å–∫:          ${normal} %b\n" "$disk_status"
printf "${bold}${cyan}üì∂ –¢—Ä–∞—Ñ–∏–∫:        ${normal} %s\n" "$traffic"
printf "${bold}${cyan}üîê CrowdSec:      ${normal} %b\n" "$crowdsec_status"
printf "${bold}${cyan}üê≥ Docker:        ${normal} %b\n" "$docker_msg"
printf "${bold}${cyan}üõ°Ô∏è  Fail2Ban:     ${normal} %s\n" "$fail2ban_status"
printf "${bold}${cyan}üß± UFW:           ${normal} %s\n" "$ufw_status"
printf "${bold}${cyan}üë• SSH:           ${normal} %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" "$ssh_users"
printf "${bold}${cyan}üåê IP:            ${normal} –õ–æ–∫–∞–ª—å–Ω—ã–π: ${ip_local} | –ü—É–±–ª–∏—á–Ω—ã–π: ${ip_public}\n"
printf "${bold}${cyan}üîó IPv6:          ${normal} %s\n" "$ip6"
printf "${bold}${cyan}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:    ${normal} %b\n" "$update_msg"
[ -n "$temp_status" ] && printf "${bold}${cyan}${temp_status}\n"
echo "$separator"

# –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
echo "${bold}${white}‚úîÔ∏è  –°–ò–°–¢–ï–ú–ù–û–ï –†–ï–ó–Æ–ú–ï:${normal}"
[ "$updates" -eq 0 ] && echo "$ok –ü–∞–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã" || echo "$warn –î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ($updates)"
[ "$disk_used" -ge 85 ] && echo "$fail –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Å–∫–∞" || echo "$ok –î–∏—Å–∫ –≤ –Ω–æ—Ä–º–µ"
[ "$(echo "$cpu_usage" | cut -d% -f1)" -gt 90 ] && echo "$warn –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU" || echo "$ok CPU –≤ –Ω–æ—Ä–º–µ"
[[ "$docker_msg" == *"Issues:"* ]] && echo "$fail –ü—Ä–æ–±–ª–µ–º—ã —Å Docker" || echo "$ok Docker –≤ –Ω–æ—Ä–º–µ"
[[ "$crowdsec_status" =~ "$fail" ]] && echo "$fail CrowdSec –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "$ok CrowdSec –∞–∫—Ç–∏–≤–µ–Ω"
[[ "$ufw_status" =~ "disabled" ]] && echo "$warn UFW –æ—Ç–∫–ª—é—á–µ–Ω" || echo "$ok UFW –∞–∫—Ç–∏–≤–µ–Ω"
echo ""
EOF
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_root
    check_utf8
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --force)
                FORCE_MODE=true
                shift
                ;;
            *)
                show_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
                exit 1
                ;;
        esac
    done

    install_packages

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    TMP_FILE=$(mktemp)
    generate_dashboard "$TMP_FILE"

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    clear
    echo -e "${COLOR_BLUE}====================================================${COLOR_RESET}"
    echo -e "${COLOR_BLUE}üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä MOTD:${COLOR_RESET}"
    echo -e "${COLOR_BLUE}====================================================${COLOR_RESET}"
    bash "$TMP_FILE"
    echo -e "${COLOR_BLUE}====================================================${COLOR_RESET}"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    if [ "$FORCE_MODE" = true ]; then
        echo -e "${COLOR_CYAN}‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (--force)${COLOR_RESET}"
        mv "$TMP_FILE" "$DASHBOARD_FILE"
        chmod 755 "$DASHBOARD_FILE"
        # –û—Ç–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ MOTD —Å–∫—Ä–∏–ø—Ç—ã
        find /etc/update-motd.d/ -type f -not -name "99-dashboard" -exec chmod -x {} \;
        show_success "MOTD –¥–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $DASHBOARD_FILE"
    else
        read -p '‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç MOTD-–¥–∞—à–±–æ—Ä–¥? [y/N]: ' confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            mv "$TMP_FILE" "$DASHBOARD_FILE"
            chmod 755 "$DASHBOARD_FILE"
            find /etc/update-motd.d/ -type f -not -name "99-dashboard" -exec chmod -x {} \;
            show_success "MOTD –¥–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $DASHBOARD_FILE"
        else
            echo -e "${COLOR_YELLOW}‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.${COLOR_RESET}"
            rm -f "$TMP_FILE"
        fi
    fi
}

main "$@"